package chapter22.example03;

public class IntArray {

		int [] intArray = {10, 20, 30, 40};
		
		void intrun() {
			for( int a : intArray) {	// 향상된 for문
				System.out.println(a);
			}
		}
		
}
package chapter22.example03;

public class Main {
	public static void main(String[] args) {
		IntArray ia = new IntArray();
		ia.intrun();
	}
}

IntArray: 정수형 배열을 선언하고 초기화하며, 
배열의 요소들을 출력하는 intrun() 메서드를 가지고 있습니다.

Main: IntArray 클래스를 이용하여 인스턴스를 생성하고, 
해당 인스턴스의 intrun() 메서드를 호출하여 배열의 요소들을 출력합니다.

여기서 특이한 점은 IntArray 클래스에서 intrun() 메서드를 사용할 때 
향상된 for문을 사용하여 배열의 요소를 반복하고 출력한다는 것입니다. 
향상된 for문은 배열 또는 컬렉션의 요소들을 순회하며 각 요소에 대해 반복 작업을 수행할 때 사용됩니다. 
따라서 intrun() 메서드는 배열에 포함된 요소들을 모두 출력하는 역할을 합니다.
------------------------------------------------------------

방금 Tire 인터페이스의 Car 클래스와 CarMain 클래스를 배열로 표현한 것.

package chapter01.example07;

public class Car {	// 인터페이스는 구현객체를 담을 수 있다. 부모는 자식을 담을 수 있다와 같은 개념.
	
	Tire [] tires = {
				new HankookTire(),	// 0번 인덱스
				new HankookTire(),	// 1번 인덱스
				new KumhoTire(),	// 2번 인덱스
				new KumhoTire(),	// 3번 인덱스
	};
	

	void tireRun() {
		for(Tire tire : tires) {	// 타이어 타입 변수명과 배열 이름
			tire.roll();
		}
	}
}

package chapter01.example07;

public class CarMain {

	public static void main(String[] args) {
		
		Car car = new Car();
		
		car.tireRun();
		
		car.tires[0] = new KumhoTire(); 	// 금호타이어로 바꿈
		car.tires[1] = new KumhoTire();
		car.tires[2] = new HankookTire();	// 한국타이어로 바꿈
		car.tires[3] = new HankookTire();

		car.tireRun();
	}
}
